[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sudoku-tui"
version = "0.1.0"
description = "A terminal-based Sudoku game built with Clean Architecture principles"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["sudoku", "tui", "terminal", "game", "puzzle"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Games/Entertainment :: Puzzle Games",
]
dependencies = [
    "textual>=0.47.0",
]


[dependency-groups]
dev = [
    "pyright>=1.1.407",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest>=8.4.2",
    "ruff>=0.14.2",
]

[project.scripts]
sudoku = "sudoku.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/sudoku"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "README.md",
    "pyproject.toml",
]

# Pytest Configuration is in pytest.ini for better Emacs compatibility

# Coverage Configuration
[tool.coverage.run]
source = ["src/sudoku"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
    "\\.\\.\\.",
]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true
exclude = [
    "tests/",
    ".venv/",
]

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PD",     # pandas-vet
    "PL",     # pylint
    "TRY",    # tryceratops
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "TRY003", # Avoid specifying long messages outside exception class
    "PLR0913", # Too many arguments
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__ files
"tests/**/*.py" = [
    "S101",   # Allow assert in tests
    "ARG",    # Allow unused arguments in tests
    "PLR2004", # Allow magic values in tests
]

[tool.ruff.lint.isort]
known-first-party = ["sudoku"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
